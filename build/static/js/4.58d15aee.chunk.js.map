{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Section/Section.module.css","components/ContactsList/ContactsList.module.css","components/Filter/Filter.module.css","services/services.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","redux/contacts/contacts-operations.js","components/Section/Section.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","views/ContactsPage/ContactsPage.js"],"names":["module","exports","fetchContacts","a","axios","get","data","addContacts","name","number","contact","post","deleteContact","id","delete","defaults","baseURL","getFilter","state","contacts","filter","getFilteredContacts","createSelector","items","normalizeFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","dispatch","useDispatch","useSelector","handleChange","e","currentTarget","value","reset","onSubmit","contactInfo","preventDefault","find","toast","error","actions","api","className","s","form","label","input","type","onChange","pattern","title","required","btn","style","marginLeft","width","height","Section","children","section","ContactsList","onDeleteContact","useEffect","list","map","item","onClick","Filter","changeFilter","target","placeholder","ContactsPage"],"mappings":"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","file":"static/js/4.58d15aee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"label\":\"ContactForm_label__378f8\",\"input\":\"ContactForm_input__gm87B\",\"btn\":\"ContactForm_btn__2Bpnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Section_title__2S6oE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactsList_item__2O7n3\",\"btn\":\"ContactsList_btn__3aoj_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__3DcZT\",\"input\":\"Filter_input__2DoVp\"};","import axios from \"axios\";\n//import { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\naxios.defaults.baseURL = 'https://connections-api.herokuapp.com';\n\n\nexport async function fetchContacts() {\n    const { data } = await axios.get('./contacts'); \n    return data;\n}\n\n\n\nexport async function addContacts ({ name, number }) {\n    const contact = { name, number };\n\n    const { data } = await axios.post('./contacts', contact);\n    return data;\n}\n\nexport async function deleteContact(id) {\n    const { data } = await axios.delete(`./contacts/${id}`);\n    return data;\n}\n\n","import { createSelector } from \"reselect\";\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getAllContacts = state => state.contacts.items;\n\n\nexport const getFilteredContacts = createSelector(\n  [getFilter, getAllContacts],\n  (filter, items) => {\n    const normalizeFilter = filter.toLowerCase();\n    return  items.filter(({ name}) =>\n      name.toLowerCase().includes(normalizeFilter),\n    )}\n)","import React, { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport { useDispatch, useSelector} from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { TiTickOutline } from 'react-icons/ti';\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction ContactForm() {\n  \n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(getFilteredContacts);\n \n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (contacts.find(contact => contact.name === name)) {\n      toast.error(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n \n    return (\n      <form onSubmit={handleSubmit} className={s.form}>\n        <label className={s.label}>\n          Name\n          <input\n            className={s.input}\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            onChange={handleChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className={s.label}>\n          Phone\n          <input\n            className={s.input}\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            onChange={handleChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n        </label>\n\n        <button type=\"submit\" className={s.btn}>\n          Add contact\n          <TiTickOutline style={{\n            marginLeft: 10, width: 25, height: 25\n          }} />\n        </button>\n      </form>\n    )\n\n}\n\nexport default ContactForm;\n","import * as api from '../../services/services';\nimport * as actions from './contacts-actions';\n\n\nexport const fetchContacts = () => async dispatch => {\n    \n    dispatch(actions.fetchContactRequest());\n\n    try {\n        const contacts = await api.fetchContacts();\n        dispatch(actions.fetchContactSuccess(contacts))\n\n    } catch (error) {\n        dispatch(actions.fetchContactError(error))\n    }\n }\n\nexport const addContact = contactInfo => async dispatch => {  \n    dispatch(actions.addContactRequest());\n\n    try {\n        \n        const contact = await api.addContacts(contactInfo);\n        dispatch(actions.addContactSuccess(contact))\n    } catch (error) {\n        dispatch(actions.addContactError(error))\n    }\n}\n\nexport const deleteContact = id => async dispatch => {\n    dispatch(actions.deleteContactRequest());\n\n    try {\n        await api.deleteContact(id);\n        dispatch(actions.deleteContactSuccess(id));\n\n    } catch (error) {\n        dispatch(actions.deleteContactError(error))\n    }\n\n} ","import PropTypes from 'prop-types';\nimport React from 'react';\nimport s from './Section.module.css';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section className={s.section}>\n      {title && <h2 className={s.title}>{title}</h2>}\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.node,\n}\n\n\nexport default Section;\n","\nimport { useSelector, useDispatch } from 'react-redux';\nimport React, { useEffect } from 'react';\nimport s from './ContactsList.module.css';\nimport { deleteContact, fetchContacts } from 'redux/contacts/contacts-operations';\nimport { TiDeleteOutline } from \"react-icons/ti\";\nimport { getFilteredContacts } from '../../redux/contacts/contacts-selectors';\n\nconst ContactsList = () => {\n\n  const contacts = useSelector(getFilteredContacts);\n  const dispatch = useDispatch();\n\n   const onDeleteContact = id => dispatch(deleteContact(id));\n\n  useEffect(() => \n    dispatch(fetchContacts()), [dispatch]\n  )\n\n  return (\n    <ul className={ s.list}>\n      {contacts.map(({ name, number, id }) => (\n        <li key={id} className={s.item}>\n          <span>{name} </span><span>{number}</span>\n          <button\n            type=\"button\"\n            onClick={() => onDeleteContact(id)}\n            className={s.btn}\n          >\n            Delete\n            <TiDeleteOutline style={{ marginLeft: 5, width: 15, height: 15}}/>\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\n\nexport default ContactsList;\n","import React from 'react';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { changeFilter } from 'redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n \nconst Filter = () => {\n  const value = useSelector(state => getFilter(state));\n  const dispatch = useDispatch();\n  return (\n    <label className={s.label}>\n      Find contacts by name: \n      <input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(changeFilter(e.target.value))}\n        className={s.input}\n        placeholder=\"Fiona Holmse\"  \n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import ContactForm from 'components/ContactForm';\nimport  Section from 'components/Section';\nimport ContactsList  from 'components/ContactsList';\nimport Filter from 'components/Filter';\n\nconst ContactsPage = () => {\n    return (\n        <>\n        <ContactForm />\n        <Section title=\"Contacts\">\n          <Filter /> \n           <ContactsList/> \n        </Section> \n        </>\n\n    )\n}\n\nexport default ContactsPage;"],"sourceRoot":""}